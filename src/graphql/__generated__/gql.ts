/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "\n  mutation Login($email: String!, $password: String!) {\n    login(input: { email: $email, password: $password }) {\n      user {\n        username\n        userPicture\n        bannerPicture\n      }\n      token\n      errors\n    }\n  }\n": types.LoginDocument,
    "\n  mutation Register($username: String!, $email: String!, $password: String!) {\n    register(\n      input: { username: $username, email: $email, password: $password }\n    ) {\n      user {\n        username\n        userPicture\n        bannerPicture\n      }\n      token\n      errors\n    }\n  }\n": types.RegisterDocument,
    "\n  mutation AddCommentToCommentable(\n    $commentableId: ID!\n    $commentableType: String!\n    $body: String!\n  ) {\n    addCommentToCommentable(\n      input: {\n        commentableId: $commentableId\n        commentableType: $commentableType\n        body: $body\n      }\n    ) {\n      comment {\n        id\n        commentableId\n        commentableType\n        user {\n          id\n          username\n          userPicture\n        }\n        body\n        updatedAt\n        commentable {\n          __typename\n          ... on StatusUpdate {\n            id\n            gameId\n            gameName\n            imageURL\n            updatedAt\n            status\n            user {\n              id\n              username\n              userPicture\n            }\n            likesCount\n            likedUsers {\n              id\n              username\n              userPicture\n            }\n            comments {\n              id\n              body\n              user {\n                id\n                username\n                userPicture\n              }\n              updatedAt\n            }\n          }\n          ... on Post {\n            id\n            userId\n            text\n            user {\n              id\n              username\n              userPicture\n            }\n            likesCount\n            likedUsers {\n              id\n              username\n              userPicture\n            }\n            comments {\n              id\n              body\n              user {\n                id\n                username\n                userPicture\n              }\n              updatedAt\n            }\n          }\n        }\n      }\n      errors\n    }\n  }\n": types.AddCommentToCommentableDocument,
    "\n  mutation RemoveCommentFromCommentable(\n    $commentableId: ID!\n    $commentableType: String!\n    $commentId: ID!\n  ) {\n    removeCommentFromCommentable(\n      input: {\n        commentableId: $commentableId\n        commentableType: $commentableType\n        commentId: $commentId\n      }\n    ) {\n      comment {\n        id\n        commentableId\n        commentableType\n        user {\n          id\n          username\n          userPicture\n        }\n        body\n        updatedAt\n        commentable {\n          __typename\n          ... on StatusUpdate {\n            id\n            gameId\n            gameName\n            imageURL\n            updatedAt\n            user {\n              id\n              username\n              userPicture\n            }\n            status\n            likesCount\n            likedUsers {\n              id\n              username\n              userPicture\n            }\n            comments {\n              id\n              body\n              user {\n                id\n                username\n                userPicture\n              }\n              updatedAt\n            }\n          }\n          ... on Post {\n            id\n            userId\n            user {\n              id\n              username\n              userPicture\n            }\n            text\n            likesCount\n            likedUsers {\n              id\n              username\n              userPicture\n            }\n            comments {\n              id\n              body\n              user {\n                id\n                username\n                userPicture\n              }\n              updatedAt\n            }\n          }\n        }\n      }\n      errors\n    }\n  }\n": types.RemoveCommentFromCommentableDocument,
    "\n  mutation EditCommentById($commentId: ID!, $body: String!) {\n    editCommentById(input: { commentId: $commentId, body: $body }) {\n      comment {\n        id\n        commentableId\n        commentableType\n        user {\n          id\n          username\n          userPicture\n        }\n        body\n        updatedAt\n        commentable {\n          __typename\n          ... on StatusUpdate {\n            id\n            gameId\n            gameName\n            imageURL\n            updatedAt\n            status\n            user {\n              id\n              username\n              userPicture\n            }\n            likesCount\n            likedUsers {\n              id\n              username\n              userPicture\n            }\n            comments {\n              id\n              body\n              user {\n                id\n                username\n                userPicture\n              }\n              updatedAt\n            }\n          }\n          ... on Post {\n            id\n            userId\n            text\n            user {\n              id\n              username\n              userPicture\n            }\n            likesCount\n            likedUsers {\n              id\n              username\n              userPicture\n            }\n            comments {\n              id\n              body\n              user {\n                id\n                username\n                userPicture\n              }\n              updatedAt\n            }\n          }\n        }\n      }\n      errors\n    }\n  }\n": types.EditCommentByIdDocument,
    "\n  query AllFollowsAndFollowers {\n    getAllFollows {\n      id\n      followedUsers {\n        id\n        username\n        userPicture\n      }\n      followers {\n        id\n        username\n        userPicture\n      }\n    }\n  }\n": types.AllFollowsAndFollowersDocument,
    "\n  mutation AddFollowsById($followedId: ID!) {\n    addFollowsById(input: { followedId: $followedId }) {\n      follow {\n        id\n        followedUsers {\n          id\n          username\n          userPicture\n        }\n        followers {\n          id\n          username\n          userPicture\n        }\n      }\n      errors\n    }\n  }\n": types.AddFollowsByIdDocument,
    "\n  mutation RemoveFollowsById($followedId: ID!) {\n    removeFollowsById(input: { followedId: $followedId }) {\n      follow {\n        id\n        followedUsers {\n          id\n          username\n          userPicture\n        }\n        followers {\n          id\n          username\n          userPicture\n        }\n      }\n      errors\n    }\n  }\n": types.RemoveFollowsByIdDocument,
    "\n  query GetGameById($id: ID!) {\n    getGameById(id: $id) {\n      id\n      name\n      description\n      bannerURL\n      imageURL\n      releaseDate\n      avgScore\n      totalRating\n      genres\n      tags\n      platforms\n      isGameAdded\n      isGameLiked\n    }\n  }\n": types.GetGameByIdDocument,
    "\n  query GetAllGamesByGenre($genre: EntityIdNameAttributes!, $limit: Int) {\n    getAllGamesByGenre(genre: $genre, limit: $limit) {\n      name\n    }\n  }\n": types.GetAllGamesByGenreDocument,
    "\n  query GetAllGamesByPlatform($platform: EntityIdNameAttributes!, $limit: Int) {\n    getAllGamesByPlatform(platform: $platform, limit: $limit) {\n      name\n    }\n  }\n": types.GetAllGamesByPlatformDocument,
    "\n  query GetAllGamesByTag($tag: EntityIdNameAttributes!, $limit: Int) {\n    getAllGamesByTag(tag: $tag, limit: $limit) {\n      name\n    }\n  }\n": types.GetAllGamesByTagDocument,
    "\n  query GetGameFilters {\n    getGameFilters {\n      genres\n      platforms\n      tags\n      year\n      errors\n    }\n  }\n": types.GetGameFiltersDocument,
    "\n        fragment GetAllGames on Game {\n          id\n          name\n          description\n          bannerURL\n          imageURL\n          releaseDate\n          avgScore\n          totalRating\n          genres\n          tags\n          platforms\n          isGameAdded\n          isGameLiked\n        }\n      ": types.GetAllGamesFragmentDoc,
    "\n  query GetAllGames(\n    $genre: [String!]\n    $tag: [String!]\n    $platform: [String!]\n    $year: Int\n    $search: String\n    $sortBy: String\n    $limit: Int\n    $offset: Int\n  ) {\n    allGames(\n      genre: $genre\n      tag: $tag\n      platform: $platform\n      year: $year\n      search: $search\n      sortBy: $sortBy\n      limit: $limit\n      offset: $offset\n    ) {\n      id\n      name\n      description\n      bannerURL\n      imageURL\n      releaseDate\n      avgScore\n      totalRating\n      genres\n      tags\n      platforms\n      isGameAdded\n      isGameLiked\n    }\n  }\n": types.GetAllGamesDocument,
    "\n  mutation AddLikeToLikeable($likeableId: ID!, $likeableType: String!) {\n    addLikeToLikeable(\n      input: { likeableId: $likeableId, likeableType: $likeableType }\n    ) {\n      like {\n        id\n        likeableId\n        likeableType\n        userId\n        user {\n          id\n          username\n          userPicture\n        }\n        likeable {\n          __typename\n          ... on StatusUpdate {\n            id\n            gameId\n            gameName\n\n            updatedAt\n            status\n            user {\n              id\n              username\n              userPicture\n            }\n            likesCount\n            likedUsers {\n              id\n              username\n              userPicture\n            }\n          }\n          ... on Follow {\n            id\n          }\n\n          ... on Game {\n            id\n            name\n            description\n            bannerURL\n            imageURL\n            releaseDate\n            avgScore\n            totalRating\n            genres\n            tags\n            platforms\n            isGameAdded\n            isGameLiked\n          }\n\n          ... on Post {\n            id\n            userId\n            text\n            user {\n              id\n              username\n              userPicture\n            }\n            likesCount\n            likedUsers {\n              id\n              username\n              userPicture\n            }\n          }\n        }\n      }\n      errors\n    }\n  }\n": types.AddLikeToLikeableDocument,
    "\n  mutation RemoveLikeFromLikeable($likeableId: ID!, $likeableType: String!) {\n    removeLikeFromLikeable(\n      input: { likeableId: $likeableId, likeableType: $likeableType }\n    ) {\n      like {\n        id\n        likeableId\n        likeableType\n        userId\n        user {\n          id\n          username\n          userPicture\n        }\n        likeable {\n          __typename\n          ... on StatusUpdate {\n            id\n            gameId\n            gameName\n\n            updatedAt\n            status\n            user {\n              id\n              username\n              userPicture\n            }\n            likesCount\n            likedUsers {\n              id\n              username\n              userPicture\n            }\n          }\n          ... on Follow {\n            id\n          }\n          ... on Game {\n            id\n            name\n            description\n            bannerURL\n            imageURL\n            releaseDate\n            avgScore\n            totalRating\n            genres\n            tags\n            platforms\n            isGameAdded\n            isGameLiked\n          }\n\n          ... on Post {\n            id\n            userId\n            text\n            user {\n              id\n              username\n              userPicture\n            }\n            likesCount\n            likedUsers {\n              id\n              username\n              userPicture\n            }\n          }\n        }\n      }\n      errors\n    }\n  }\n": types.RemoveLikeFromLikeableDocument,
    "\n  query GetAllLikedGames {\n    getAllLikedGames {\n      id\n      likeableId\n      likeableType\n      likeable {\n        __typename\n        ... on Game {\n          id\n          name\n          description\n          bannerURL\n          imageURL\n          releaseDate\n          avgScore\n          isGameAdded\n          isGameLiked\n        }\n      }\n    }\n  }\n": types.GetAllLikedGamesDocument,
    "\n  query getGlobalPosts {\n    getGlobalPosts {\n      id\n      userId\n      username\n      userPicture\n      user {\n        id\n        username\n        userPicture\n      }\n\n      updatedAt\n      text\n      likesCount\n      likedUsers {\n        id\n        username\n        userPicture\n      }\n      comments {\n        id\n        body\n        commentableId\n        commentableType\n        user {\n          id\n          username\n          userPicture\n        }\n        updatedAt\n      }\n    }\n  }\n": types.GetGlobalPostsDocument,
    "\n  mutation createPost($text: String!) {\n    createPost(input: { text: $text }) {\n      post {\n        id\n        userId\n        username\n        userPicture\n        user {\n          id\n          username\n          userPicture\n        }\n        updatedAt\n        text\n        likesCount\n        likedUsers {\n          id\n          username\n          userPicture\n        }\n        comments {\n          id\n          body\n          commentableId\n          commentableType\n          user {\n            id\n            username\n            userPicture\n          }\n          updatedAt\n        }\n      }\n      errors\n    }\n  }\n": types.CreatePostDocument,
    "\n  query GetGlobalSocials($limit: Int, $offset: Int) {\n    getGlobalSocials(limit: $limit, offset: $offset) {\n      ... on Post {\n        id\n        userId\n        username\n        userPicture\n        user {\n          id\n          username\n          userPicture\n        }\n        updatedAt\n        text\n        likesCount\n        likedUsers {\n          id\n          username\n          userPicture\n        }\n        comments {\n          id\n          body\n          commentableId\n          commentableType\n          user {\n            id\n            username\n            userPicture\n          }\n          updatedAt\n        }\n      }\n      ... on StatusUpdate {\n        id\n        userId\n        username\n        userPicture\n        user {\n          id\n          username\n          userPicture\n        }\n        gameId\n        gameName\n        imageURL\n        updatedAt\n        status\n        likesCount\n        likedUsers {\n          id\n          username\n          userPicture\n        }\n        comments {\n          id\n          body\n          commentableId\n          commentableType\n          user {\n            id\n            username\n            userPicture\n          }\n          updatedAt\n        }\n      }\n    }\n  }\n": types.GetGlobalSocialsDocument,
    "\n  query getAllStatusUpdatesForAUser {\n    getAllStatusUpdatesForAUser {\n      id\n      gameId\n      gameName\n      user {\n        id\n        username\n        userPicture\n      }\n      imageURL\n      updatedAt\n      status\n      likesCount\n      likedUsers {\n        id\n        username\n        userPicture\n      }\n      comments {\n        id\n        body\n        commentableId\n        commentableType\n        user {\n          id\n          username\n          userPicture\n        }\n        updatedAt\n      }\n    }\n  }\n": types.GetAllStatusUpdatesForAUserDocument,
    "\n  query getGlobalStatusUpdates {\n    getGlobalStatusUpdates {\n      id\n      userId\n      username\n      userPicture\n      user {\n        id\n        username\n        userPicture\n      }\n      gameId\n      gameName\n      imageURL\n      updatedAt\n      status\n      likesCount\n      likedUsers {\n        id\n        username\n        userPicture\n      }\n      comments {\n        id\n        body\n        commentableId\n        commentableType\n        user {\n          id\n          username\n          userPicture\n        }\n        updatedAt\n      }\n    }\n  }\n": types.GetGlobalStatusUpdatesDocument,
    "\n  query User {\n    getUserById {\n      id\n      username\n      bannerPicture\n      userPicture\n    }\n  }\n": types.UserDocument,
    "\n  mutation editListsOrder($payload: Scalar!, $action: String!) {\n    updateUser(input: { payload: $payload, action: $action }) {\n      user {\n        listsOrder\n      }\n      errors\n    }\n  }\n": types.EditListsOrderDocument,
    "\n  mutation DeleteUserGames($gameId: ID!) {\n    deleteUserGames(input: { gameId: $gameId }) {\n      userGame {\n        id\n        gameStatus\n        gameNote\n        startDate\n        completedDate\n        rating\n        private\n        game {\n          id\n          name\n          description\n          bannerURL\n          imageURL\n          releaseDate\n          avgScore\n          totalRating\n          genres\n          tags\n          platforms\n          isGameAdded\n          isGameLiked\n        }\n      }\n      errors\n    }\n  }\n": types.DeleteUserGamesDocument,
    "\n  mutation AddUserGames($gameId: ID!) {\n    addUserGames(input: { gameId: $gameId }) {\n      userGame {\n        id\n        gameStatus\n        gameNote\n        startDate\n        completedDate\n        rating\n        private\n        game {\n          id\n          name\n          description\n          bannerURL\n          imageURL\n          releaseDate\n          avgScore\n          totalRating\n          genres\n          tags\n          platforms\n          isGameAdded\n          isGameLiked\n        }\n      }\n      errors\n    }\n  }\n": types.AddUserGamesDocument,
    "\n  query GamesForAUser {\n    gamesForAUser {\n      id\n      name\n      description\n      bannerURL\n      imageURL\n      releaseDate\n      avgScore\n      totalRating\n      genres\n      tags\n      platforms\n      isGameAdded\n      isGameLiked\n    }\n  }\n": types.GamesForAUserDocument,
    "\n  query GetUserGameByGameId($gameId: ID!) {\n    getUserGameByGameId(gameId: $gameId) {\n      gameNote\n      gameStatus\n      id\n      startDate\n      completedDate\n      rating\n      private\n      createdAt\n      updatedAt\n    }\n  }\n": types.GetUserGameByGameIdDocument,
    "\n  query GamesByTagsForAUser {\n    gamesByStatusForAUser {\n      playing {\n        id\n        name\n        description\n        bannerURL\n        imageURL\n        releaseDate\n        avgScore\n        totalRating\n        genres\n        tags\n        platforms\n        isGameAdded\n        isGameLiked\n      }\n      planning {\n        id\n        name\n        description\n        bannerURL\n        imageURL\n        releaseDate\n        avgScore\n        totalRating\n        genres\n        tags\n        platforms\n        isGameAdded\n        isGameLiked\n      }\n      completed {\n        id\n        name\n        description\n        bannerURL\n        imageURL\n        releaseDate\n        avgScore\n        totalRating\n        genres\n        tags\n        platforms\n        isGameAdded\n        isGameLiked\n      }\n      paused {\n        id\n        name\n        description\n        bannerURL\n        imageURL\n        releaseDate\n        avgScore\n        totalRating\n        genres\n        tags\n        platforms\n        isGameAdded\n        isGameLiked\n      }\n      dropped {\n        id\n        name\n        description\n        bannerURL\n        imageURL\n        releaseDate\n        avgScore\n        totalRating\n        genres\n        tags\n        platforms\n        isGameAdded\n        isGameLiked\n      }\n      justAdded {\n        id\n        name\n        description\n        bannerURL\n        imageURL\n        releaseDate\n        avgScore\n        totalRating\n        genres\n        tags\n        platforms\n        isGameAdded\n        isGameLiked\n      }\n      playingCount\n      planningCount\n      completedCount\n      pausedCount\n      droppedCount\n      justAddedCount\n      totalCount\n      listsOrder\n      errors\n    }\n  }\n": types.GamesByTagsForAUserDocument,
    "\n  mutation EditUserGameByGameId($input: EditUserGamesInput!) {\n    editUserGames(input: $input) {\n      userGame {\n        id\n        gameNote\n        gameStatus\n        startDate\n        completedDate\n        rating\n        private\n        createdAt\n        updatedAt\n        game {\n          id\n          name\n          description\n          bannerURL\n          imageURL\n          releaseDate\n          avgScore\n          totalRating\n          genres\n          tags\n          platforms\n          isGameAdded\n          isGameLiked\n        }\n      }\n      errors\n    }\n  }\n": types.EditUserGameByGameIdDocument,
};

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = gql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function gql(source: string): unknown;

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation Login($email: String!, $password: String!) {\n    login(input: { email: $email, password: $password }) {\n      user {\n        username\n        userPicture\n        bannerPicture\n      }\n      token\n      errors\n    }\n  }\n"): (typeof documents)["\n  mutation Login($email: String!, $password: String!) {\n    login(input: { email: $email, password: $password }) {\n      user {\n        username\n        userPicture\n        bannerPicture\n      }\n      token\n      errors\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation Register($username: String!, $email: String!, $password: String!) {\n    register(\n      input: { username: $username, email: $email, password: $password }\n    ) {\n      user {\n        username\n        userPicture\n        bannerPicture\n      }\n      token\n      errors\n    }\n  }\n"): (typeof documents)["\n  mutation Register($username: String!, $email: String!, $password: String!) {\n    register(\n      input: { username: $username, email: $email, password: $password }\n    ) {\n      user {\n        username\n        userPicture\n        bannerPicture\n      }\n      token\n      errors\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation AddCommentToCommentable(\n    $commentableId: ID!\n    $commentableType: String!\n    $body: String!\n  ) {\n    addCommentToCommentable(\n      input: {\n        commentableId: $commentableId\n        commentableType: $commentableType\n        body: $body\n      }\n    ) {\n      comment {\n        id\n        commentableId\n        commentableType\n        user {\n          id\n          username\n          userPicture\n        }\n        body\n        updatedAt\n        commentable {\n          __typename\n          ... on StatusUpdate {\n            id\n            gameId\n            gameName\n            imageURL\n            updatedAt\n            status\n            user {\n              id\n              username\n              userPicture\n            }\n            likesCount\n            likedUsers {\n              id\n              username\n              userPicture\n            }\n            comments {\n              id\n              body\n              user {\n                id\n                username\n                userPicture\n              }\n              updatedAt\n            }\n          }\n          ... on Post {\n            id\n            userId\n            text\n            user {\n              id\n              username\n              userPicture\n            }\n            likesCount\n            likedUsers {\n              id\n              username\n              userPicture\n            }\n            comments {\n              id\n              body\n              user {\n                id\n                username\n                userPicture\n              }\n              updatedAt\n            }\n          }\n        }\n      }\n      errors\n    }\n  }\n"): (typeof documents)["\n  mutation AddCommentToCommentable(\n    $commentableId: ID!\n    $commentableType: String!\n    $body: String!\n  ) {\n    addCommentToCommentable(\n      input: {\n        commentableId: $commentableId\n        commentableType: $commentableType\n        body: $body\n      }\n    ) {\n      comment {\n        id\n        commentableId\n        commentableType\n        user {\n          id\n          username\n          userPicture\n        }\n        body\n        updatedAt\n        commentable {\n          __typename\n          ... on StatusUpdate {\n            id\n            gameId\n            gameName\n            imageURL\n            updatedAt\n            status\n            user {\n              id\n              username\n              userPicture\n            }\n            likesCount\n            likedUsers {\n              id\n              username\n              userPicture\n            }\n            comments {\n              id\n              body\n              user {\n                id\n                username\n                userPicture\n              }\n              updatedAt\n            }\n          }\n          ... on Post {\n            id\n            userId\n            text\n            user {\n              id\n              username\n              userPicture\n            }\n            likesCount\n            likedUsers {\n              id\n              username\n              userPicture\n            }\n            comments {\n              id\n              body\n              user {\n                id\n                username\n                userPicture\n              }\n              updatedAt\n            }\n          }\n        }\n      }\n      errors\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation RemoveCommentFromCommentable(\n    $commentableId: ID!\n    $commentableType: String!\n    $commentId: ID!\n  ) {\n    removeCommentFromCommentable(\n      input: {\n        commentableId: $commentableId\n        commentableType: $commentableType\n        commentId: $commentId\n      }\n    ) {\n      comment {\n        id\n        commentableId\n        commentableType\n        user {\n          id\n          username\n          userPicture\n        }\n        body\n        updatedAt\n        commentable {\n          __typename\n          ... on StatusUpdate {\n            id\n            gameId\n            gameName\n            imageURL\n            updatedAt\n            user {\n              id\n              username\n              userPicture\n            }\n            status\n            likesCount\n            likedUsers {\n              id\n              username\n              userPicture\n            }\n            comments {\n              id\n              body\n              user {\n                id\n                username\n                userPicture\n              }\n              updatedAt\n            }\n          }\n          ... on Post {\n            id\n            userId\n            user {\n              id\n              username\n              userPicture\n            }\n            text\n            likesCount\n            likedUsers {\n              id\n              username\n              userPicture\n            }\n            comments {\n              id\n              body\n              user {\n                id\n                username\n                userPicture\n              }\n              updatedAt\n            }\n          }\n        }\n      }\n      errors\n    }\n  }\n"): (typeof documents)["\n  mutation RemoveCommentFromCommentable(\n    $commentableId: ID!\n    $commentableType: String!\n    $commentId: ID!\n  ) {\n    removeCommentFromCommentable(\n      input: {\n        commentableId: $commentableId\n        commentableType: $commentableType\n        commentId: $commentId\n      }\n    ) {\n      comment {\n        id\n        commentableId\n        commentableType\n        user {\n          id\n          username\n          userPicture\n        }\n        body\n        updatedAt\n        commentable {\n          __typename\n          ... on StatusUpdate {\n            id\n            gameId\n            gameName\n            imageURL\n            updatedAt\n            user {\n              id\n              username\n              userPicture\n            }\n            status\n            likesCount\n            likedUsers {\n              id\n              username\n              userPicture\n            }\n            comments {\n              id\n              body\n              user {\n                id\n                username\n                userPicture\n              }\n              updatedAt\n            }\n          }\n          ... on Post {\n            id\n            userId\n            user {\n              id\n              username\n              userPicture\n            }\n            text\n            likesCount\n            likedUsers {\n              id\n              username\n              userPicture\n            }\n            comments {\n              id\n              body\n              user {\n                id\n                username\n                userPicture\n              }\n              updatedAt\n            }\n          }\n        }\n      }\n      errors\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation EditCommentById($commentId: ID!, $body: String!) {\n    editCommentById(input: { commentId: $commentId, body: $body }) {\n      comment {\n        id\n        commentableId\n        commentableType\n        user {\n          id\n          username\n          userPicture\n        }\n        body\n        updatedAt\n        commentable {\n          __typename\n          ... on StatusUpdate {\n            id\n            gameId\n            gameName\n            imageURL\n            updatedAt\n            status\n            user {\n              id\n              username\n              userPicture\n            }\n            likesCount\n            likedUsers {\n              id\n              username\n              userPicture\n            }\n            comments {\n              id\n              body\n              user {\n                id\n                username\n                userPicture\n              }\n              updatedAt\n            }\n          }\n          ... on Post {\n            id\n            userId\n            text\n            user {\n              id\n              username\n              userPicture\n            }\n            likesCount\n            likedUsers {\n              id\n              username\n              userPicture\n            }\n            comments {\n              id\n              body\n              user {\n                id\n                username\n                userPicture\n              }\n              updatedAt\n            }\n          }\n        }\n      }\n      errors\n    }\n  }\n"): (typeof documents)["\n  mutation EditCommentById($commentId: ID!, $body: String!) {\n    editCommentById(input: { commentId: $commentId, body: $body }) {\n      comment {\n        id\n        commentableId\n        commentableType\n        user {\n          id\n          username\n          userPicture\n        }\n        body\n        updatedAt\n        commentable {\n          __typename\n          ... on StatusUpdate {\n            id\n            gameId\n            gameName\n            imageURL\n            updatedAt\n            status\n            user {\n              id\n              username\n              userPicture\n            }\n            likesCount\n            likedUsers {\n              id\n              username\n              userPicture\n            }\n            comments {\n              id\n              body\n              user {\n                id\n                username\n                userPicture\n              }\n              updatedAt\n            }\n          }\n          ... on Post {\n            id\n            userId\n            text\n            user {\n              id\n              username\n              userPicture\n            }\n            likesCount\n            likedUsers {\n              id\n              username\n              userPicture\n            }\n            comments {\n              id\n              body\n              user {\n                id\n                username\n                userPicture\n              }\n              updatedAt\n            }\n          }\n        }\n      }\n      errors\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query AllFollowsAndFollowers {\n    getAllFollows {\n      id\n      followedUsers {\n        id\n        username\n        userPicture\n      }\n      followers {\n        id\n        username\n        userPicture\n      }\n    }\n  }\n"): (typeof documents)["\n  query AllFollowsAndFollowers {\n    getAllFollows {\n      id\n      followedUsers {\n        id\n        username\n        userPicture\n      }\n      followers {\n        id\n        username\n        userPicture\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation AddFollowsById($followedId: ID!) {\n    addFollowsById(input: { followedId: $followedId }) {\n      follow {\n        id\n        followedUsers {\n          id\n          username\n          userPicture\n        }\n        followers {\n          id\n          username\n          userPicture\n        }\n      }\n      errors\n    }\n  }\n"): (typeof documents)["\n  mutation AddFollowsById($followedId: ID!) {\n    addFollowsById(input: { followedId: $followedId }) {\n      follow {\n        id\n        followedUsers {\n          id\n          username\n          userPicture\n        }\n        followers {\n          id\n          username\n          userPicture\n        }\n      }\n      errors\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation RemoveFollowsById($followedId: ID!) {\n    removeFollowsById(input: { followedId: $followedId }) {\n      follow {\n        id\n        followedUsers {\n          id\n          username\n          userPicture\n        }\n        followers {\n          id\n          username\n          userPicture\n        }\n      }\n      errors\n    }\n  }\n"): (typeof documents)["\n  mutation RemoveFollowsById($followedId: ID!) {\n    removeFollowsById(input: { followedId: $followedId }) {\n      follow {\n        id\n        followedUsers {\n          id\n          username\n          userPicture\n        }\n        followers {\n          id\n          username\n          userPicture\n        }\n      }\n      errors\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetGameById($id: ID!) {\n    getGameById(id: $id) {\n      id\n      name\n      description\n      bannerURL\n      imageURL\n      releaseDate\n      avgScore\n      totalRating\n      genres\n      tags\n      platforms\n      isGameAdded\n      isGameLiked\n    }\n  }\n"): (typeof documents)["\n  query GetGameById($id: ID!) {\n    getGameById(id: $id) {\n      id\n      name\n      description\n      bannerURL\n      imageURL\n      releaseDate\n      avgScore\n      totalRating\n      genres\n      tags\n      platforms\n      isGameAdded\n      isGameLiked\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetAllGamesByGenre($genre: EntityIdNameAttributes!, $limit: Int) {\n    getAllGamesByGenre(genre: $genre, limit: $limit) {\n      name\n    }\n  }\n"): (typeof documents)["\n  query GetAllGamesByGenre($genre: EntityIdNameAttributes!, $limit: Int) {\n    getAllGamesByGenre(genre: $genre, limit: $limit) {\n      name\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetAllGamesByPlatform($platform: EntityIdNameAttributes!, $limit: Int) {\n    getAllGamesByPlatform(platform: $platform, limit: $limit) {\n      name\n    }\n  }\n"): (typeof documents)["\n  query GetAllGamesByPlatform($platform: EntityIdNameAttributes!, $limit: Int) {\n    getAllGamesByPlatform(platform: $platform, limit: $limit) {\n      name\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetAllGamesByTag($tag: EntityIdNameAttributes!, $limit: Int) {\n    getAllGamesByTag(tag: $tag, limit: $limit) {\n      name\n    }\n  }\n"): (typeof documents)["\n  query GetAllGamesByTag($tag: EntityIdNameAttributes!, $limit: Int) {\n    getAllGamesByTag(tag: $tag, limit: $limit) {\n      name\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetGameFilters {\n    getGameFilters {\n      genres\n      platforms\n      tags\n      year\n      errors\n    }\n  }\n"): (typeof documents)["\n  query GetGameFilters {\n    getGameFilters {\n      genres\n      platforms\n      tags\n      year\n      errors\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n        fragment GetAllGames on Game {\n          id\n          name\n          description\n          bannerURL\n          imageURL\n          releaseDate\n          avgScore\n          totalRating\n          genres\n          tags\n          platforms\n          isGameAdded\n          isGameLiked\n        }\n      "): (typeof documents)["\n        fragment GetAllGames on Game {\n          id\n          name\n          description\n          bannerURL\n          imageURL\n          releaseDate\n          avgScore\n          totalRating\n          genres\n          tags\n          platforms\n          isGameAdded\n          isGameLiked\n        }\n      "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetAllGames(\n    $genre: [String!]\n    $tag: [String!]\n    $platform: [String!]\n    $year: Int\n    $search: String\n    $sortBy: String\n    $limit: Int\n    $offset: Int\n  ) {\n    allGames(\n      genre: $genre\n      tag: $tag\n      platform: $platform\n      year: $year\n      search: $search\n      sortBy: $sortBy\n      limit: $limit\n      offset: $offset\n    ) {\n      id\n      name\n      description\n      bannerURL\n      imageURL\n      releaseDate\n      avgScore\n      totalRating\n      genres\n      tags\n      platforms\n      isGameAdded\n      isGameLiked\n    }\n  }\n"): (typeof documents)["\n  query GetAllGames(\n    $genre: [String!]\n    $tag: [String!]\n    $platform: [String!]\n    $year: Int\n    $search: String\n    $sortBy: String\n    $limit: Int\n    $offset: Int\n  ) {\n    allGames(\n      genre: $genre\n      tag: $tag\n      platform: $platform\n      year: $year\n      search: $search\n      sortBy: $sortBy\n      limit: $limit\n      offset: $offset\n    ) {\n      id\n      name\n      description\n      bannerURL\n      imageURL\n      releaseDate\n      avgScore\n      totalRating\n      genres\n      tags\n      platforms\n      isGameAdded\n      isGameLiked\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation AddLikeToLikeable($likeableId: ID!, $likeableType: String!) {\n    addLikeToLikeable(\n      input: { likeableId: $likeableId, likeableType: $likeableType }\n    ) {\n      like {\n        id\n        likeableId\n        likeableType\n        userId\n        user {\n          id\n          username\n          userPicture\n        }\n        likeable {\n          __typename\n          ... on StatusUpdate {\n            id\n            gameId\n            gameName\n\n            updatedAt\n            status\n            user {\n              id\n              username\n              userPicture\n            }\n            likesCount\n            likedUsers {\n              id\n              username\n              userPicture\n            }\n          }\n          ... on Follow {\n            id\n          }\n\n          ... on Game {\n            id\n            name\n            description\n            bannerURL\n            imageURL\n            releaseDate\n            avgScore\n            totalRating\n            genres\n            tags\n            platforms\n            isGameAdded\n            isGameLiked\n          }\n\n          ... on Post {\n            id\n            userId\n            text\n            user {\n              id\n              username\n              userPicture\n            }\n            likesCount\n            likedUsers {\n              id\n              username\n              userPicture\n            }\n          }\n        }\n      }\n      errors\n    }\n  }\n"): (typeof documents)["\n  mutation AddLikeToLikeable($likeableId: ID!, $likeableType: String!) {\n    addLikeToLikeable(\n      input: { likeableId: $likeableId, likeableType: $likeableType }\n    ) {\n      like {\n        id\n        likeableId\n        likeableType\n        userId\n        user {\n          id\n          username\n          userPicture\n        }\n        likeable {\n          __typename\n          ... on StatusUpdate {\n            id\n            gameId\n            gameName\n\n            updatedAt\n            status\n            user {\n              id\n              username\n              userPicture\n            }\n            likesCount\n            likedUsers {\n              id\n              username\n              userPicture\n            }\n          }\n          ... on Follow {\n            id\n          }\n\n          ... on Game {\n            id\n            name\n            description\n            bannerURL\n            imageURL\n            releaseDate\n            avgScore\n            totalRating\n            genres\n            tags\n            platforms\n            isGameAdded\n            isGameLiked\n          }\n\n          ... on Post {\n            id\n            userId\n            text\n            user {\n              id\n              username\n              userPicture\n            }\n            likesCount\n            likedUsers {\n              id\n              username\n              userPicture\n            }\n          }\n        }\n      }\n      errors\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation RemoveLikeFromLikeable($likeableId: ID!, $likeableType: String!) {\n    removeLikeFromLikeable(\n      input: { likeableId: $likeableId, likeableType: $likeableType }\n    ) {\n      like {\n        id\n        likeableId\n        likeableType\n        userId\n        user {\n          id\n          username\n          userPicture\n        }\n        likeable {\n          __typename\n          ... on StatusUpdate {\n            id\n            gameId\n            gameName\n\n            updatedAt\n            status\n            user {\n              id\n              username\n              userPicture\n            }\n            likesCount\n            likedUsers {\n              id\n              username\n              userPicture\n            }\n          }\n          ... on Follow {\n            id\n          }\n          ... on Game {\n            id\n            name\n            description\n            bannerURL\n            imageURL\n            releaseDate\n            avgScore\n            totalRating\n            genres\n            tags\n            platforms\n            isGameAdded\n            isGameLiked\n          }\n\n          ... on Post {\n            id\n            userId\n            text\n            user {\n              id\n              username\n              userPicture\n            }\n            likesCount\n            likedUsers {\n              id\n              username\n              userPicture\n            }\n          }\n        }\n      }\n      errors\n    }\n  }\n"): (typeof documents)["\n  mutation RemoveLikeFromLikeable($likeableId: ID!, $likeableType: String!) {\n    removeLikeFromLikeable(\n      input: { likeableId: $likeableId, likeableType: $likeableType }\n    ) {\n      like {\n        id\n        likeableId\n        likeableType\n        userId\n        user {\n          id\n          username\n          userPicture\n        }\n        likeable {\n          __typename\n          ... on StatusUpdate {\n            id\n            gameId\n            gameName\n\n            updatedAt\n            status\n            user {\n              id\n              username\n              userPicture\n            }\n            likesCount\n            likedUsers {\n              id\n              username\n              userPicture\n            }\n          }\n          ... on Follow {\n            id\n          }\n          ... on Game {\n            id\n            name\n            description\n            bannerURL\n            imageURL\n            releaseDate\n            avgScore\n            totalRating\n            genres\n            tags\n            platforms\n            isGameAdded\n            isGameLiked\n          }\n\n          ... on Post {\n            id\n            userId\n            text\n            user {\n              id\n              username\n              userPicture\n            }\n            likesCount\n            likedUsers {\n              id\n              username\n              userPicture\n            }\n          }\n        }\n      }\n      errors\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetAllLikedGames {\n    getAllLikedGames {\n      id\n      likeableId\n      likeableType\n      likeable {\n        __typename\n        ... on Game {\n          id\n          name\n          description\n          bannerURL\n          imageURL\n          releaseDate\n          avgScore\n          isGameAdded\n          isGameLiked\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetAllLikedGames {\n    getAllLikedGames {\n      id\n      likeableId\n      likeableType\n      likeable {\n        __typename\n        ... on Game {\n          id\n          name\n          description\n          bannerURL\n          imageURL\n          releaseDate\n          avgScore\n          isGameAdded\n          isGameLiked\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query getGlobalPosts {\n    getGlobalPosts {\n      id\n      userId\n      username\n      userPicture\n      user {\n        id\n        username\n        userPicture\n      }\n\n      updatedAt\n      text\n      likesCount\n      likedUsers {\n        id\n        username\n        userPicture\n      }\n      comments {\n        id\n        body\n        commentableId\n        commentableType\n        user {\n          id\n          username\n          userPicture\n        }\n        updatedAt\n      }\n    }\n  }\n"): (typeof documents)["\n  query getGlobalPosts {\n    getGlobalPosts {\n      id\n      userId\n      username\n      userPicture\n      user {\n        id\n        username\n        userPicture\n      }\n\n      updatedAt\n      text\n      likesCount\n      likedUsers {\n        id\n        username\n        userPicture\n      }\n      comments {\n        id\n        body\n        commentableId\n        commentableType\n        user {\n          id\n          username\n          userPicture\n        }\n        updatedAt\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation createPost($text: String!) {\n    createPost(input: { text: $text }) {\n      post {\n        id\n        userId\n        username\n        userPicture\n        user {\n          id\n          username\n          userPicture\n        }\n        updatedAt\n        text\n        likesCount\n        likedUsers {\n          id\n          username\n          userPicture\n        }\n        comments {\n          id\n          body\n          commentableId\n          commentableType\n          user {\n            id\n            username\n            userPicture\n          }\n          updatedAt\n        }\n      }\n      errors\n    }\n  }\n"): (typeof documents)["\n  mutation createPost($text: String!) {\n    createPost(input: { text: $text }) {\n      post {\n        id\n        userId\n        username\n        userPicture\n        user {\n          id\n          username\n          userPicture\n        }\n        updatedAt\n        text\n        likesCount\n        likedUsers {\n          id\n          username\n          userPicture\n        }\n        comments {\n          id\n          body\n          commentableId\n          commentableType\n          user {\n            id\n            username\n            userPicture\n          }\n          updatedAt\n        }\n      }\n      errors\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetGlobalSocials($limit: Int, $offset: Int) {\n    getGlobalSocials(limit: $limit, offset: $offset) {\n      ... on Post {\n        id\n        userId\n        username\n        userPicture\n        user {\n          id\n          username\n          userPicture\n        }\n        updatedAt\n        text\n        likesCount\n        likedUsers {\n          id\n          username\n          userPicture\n        }\n        comments {\n          id\n          body\n          commentableId\n          commentableType\n          user {\n            id\n            username\n            userPicture\n          }\n          updatedAt\n        }\n      }\n      ... on StatusUpdate {\n        id\n        userId\n        username\n        userPicture\n        user {\n          id\n          username\n          userPicture\n        }\n        gameId\n        gameName\n        imageURL\n        updatedAt\n        status\n        likesCount\n        likedUsers {\n          id\n          username\n          userPicture\n        }\n        comments {\n          id\n          body\n          commentableId\n          commentableType\n          user {\n            id\n            username\n            userPicture\n          }\n          updatedAt\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetGlobalSocials($limit: Int, $offset: Int) {\n    getGlobalSocials(limit: $limit, offset: $offset) {\n      ... on Post {\n        id\n        userId\n        username\n        userPicture\n        user {\n          id\n          username\n          userPicture\n        }\n        updatedAt\n        text\n        likesCount\n        likedUsers {\n          id\n          username\n          userPicture\n        }\n        comments {\n          id\n          body\n          commentableId\n          commentableType\n          user {\n            id\n            username\n            userPicture\n          }\n          updatedAt\n        }\n      }\n      ... on StatusUpdate {\n        id\n        userId\n        username\n        userPicture\n        user {\n          id\n          username\n          userPicture\n        }\n        gameId\n        gameName\n        imageURL\n        updatedAt\n        status\n        likesCount\n        likedUsers {\n          id\n          username\n          userPicture\n        }\n        comments {\n          id\n          body\n          commentableId\n          commentableType\n          user {\n            id\n            username\n            userPicture\n          }\n          updatedAt\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query getAllStatusUpdatesForAUser {\n    getAllStatusUpdatesForAUser {\n      id\n      gameId\n      gameName\n      user {\n        id\n        username\n        userPicture\n      }\n      imageURL\n      updatedAt\n      status\n      likesCount\n      likedUsers {\n        id\n        username\n        userPicture\n      }\n      comments {\n        id\n        body\n        commentableId\n        commentableType\n        user {\n          id\n          username\n          userPicture\n        }\n        updatedAt\n      }\n    }\n  }\n"): (typeof documents)["\n  query getAllStatusUpdatesForAUser {\n    getAllStatusUpdatesForAUser {\n      id\n      gameId\n      gameName\n      user {\n        id\n        username\n        userPicture\n      }\n      imageURL\n      updatedAt\n      status\n      likesCount\n      likedUsers {\n        id\n        username\n        userPicture\n      }\n      comments {\n        id\n        body\n        commentableId\n        commentableType\n        user {\n          id\n          username\n          userPicture\n        }\n        updatedAt\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query getGlobalStatusUpdates {\n    getGlobalStatusUpdates {\n      id\n      userId\n      username\n      userPicture\n      user {\n        id\n        username\n        userPicture\n      }\n      gameId\n      gameName\n      imageURL\n      updatedAt\n      status\n      likesCount\n      likedUsers {\n        id\n        username\n        userPicture\n      }\n      comments {\n        id\n        body\n        commentableId\n        commentableType\n        user {\n          id\n          username\n          userPicture\n        }\n        updatedAt\n      }\n    }\n  }\n"): (typeof documents)["\n  query getGlobalStatusUpdates {\n    getGlobalStatusUpdates {\n      id\n      userId\n      username\n      userPicture\n      user {\n        id\n        username\n        userPicture\n      }\n      gameId\n      gameName\n      imageURL\n      updatedAt\n      status\n      likesCount\n      likedUsers {\n        id\n        username\n        userPicture\n      }\n      comments {\n        id\n        body\n        commentableId\n        commentableType\n        user {\n          id\n          username\n          userPicture\n        }\n        updatedAt\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query User {\n    getUserById {\n      id\n      username\n      bannerPicture\n      userPicture\n    }\n  }\n"): (typeof documents)["\n  query User {\n    getUserById {\n      id\n      username\n      bannerPicture\n      userPicture\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation editListsOrder($payload: Scalar!, $action: String!) {\n    updateUser(input: { payload: $payload, action: $action }) {\n      user {\n        listsOrder\n      }\n      errors\n    }\n  }\n"): (typeof documents)["\n  mutation editListsOrder($payload: Scalar!, $action: String!) {\n    updateUser(input: { payload: $payload, action: $action }) {\n      user {\n        listsOrder\n      }\n      errors\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation DeleteUserGames($gameId: ID!) {\n    deleteUserGames(input: { gameId: $gameId }) {\n      userGame {\n        id\n        gameStatus\n        gameNote\n        startDate\n        completedDate\n        rating\n        private\n        game {\n          id\n          name\n          description\n          bannerURL\n          imageURL\n          releaseDate\n          avgScore\n          totalRating\n          genres\n          tags\n          platforms\n          isGameAdded\n          isGameLiked\n        }\n      }\n      errors\n    }\n  }\n"): (typeof documents)["\n  mutation DeleteUserGames($gameId: ID!) {\n    deleteUserGames(input: { gameId: $gameId }) {\n      userGame {\n        id\n        gameStatus\n        gameNote\n        startDate\n        completedDate\n        rating\n        private\n        game {\n          id\n          name\n          description\n          bannerURL\n          imageURL\n          releaseDate\n          avgScore\n          totalRating\n          genres\n          tags\n          platforms\n          isGameAdded\n          isGameLiked\n        }\n      }\n      errors\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation AddUserGames($gameId: ID!) {\n    addUserGames(input: { gameId: $gameId }) {\n      userGame {\n        id\n        gameStatus\n        gameNote\n        startDate\n        completedDate\n        rating\n        private\n        game {\n          id\n          name\n          description\n          bannerURL\n          imageURL\n          releaseDate\n          avgScore\n          totalRating\n          genres\n          tags\n          platforms\n          isGameAdded\n          isGameLiked\n        }\n      }\n      errors\n    }\n  }\n"): (typeof documents)["\n  mutation AddUserGames($gameId: ID!) {\n    addUserGames(input: { gameId: $gameId }) {\n      userGame {\n        id\n        gameStatus\n        gameNote\n        startDate\n        completedDate\n        rating\n        private\n        game {\n          id\n          name\n          description\n          bannerURL\n          imageURL\n          releaseDate\n          avgScore\n          totalRating\n          genres\n          tags\n          platforms\n          isGameAdded\n          isGameLiked\n        }\n      }\n      errors\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GamesForAUser {\n    gamesForAUser {\n      id\n      name\n      description\n      bannerURL\n      imageURL\n      releaseDate\n      avgScore\n      totalRating\n      genres\n      tags\n      platforms\n      isGameAdded\n      isGameLiked\n    }\n  }\n"): (typeof documents)["\n  query GamesForAUser {\n    gamesForAUser {\n      id\n      name\n      description\n      bannerURL\n      imageURL\n      releaseDate\n      avgScore\n      totalRating\n      genres\n      tags\n      platforms\n      isGameAdded\n      isGameLiked\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetUserGameByGameId($gameId: ID!) {\n    getUserGameByGameId(gameId: $gameId) {\n      gameNote\n      gameStatus\n      id\n      startDate\n      completedDate\n      rating\n      private\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  query GetUserGameByGameId($gameId: ID!) {\n    getUserGameByGameId(gameId: $gameId) {\n      gameNote\n      gameStatus\n      id\n      startDate\n      completedDate\n      rating\n      private\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GamesByTagsForAUser {\n    gamesByStatusForAUser {\n      playing {\n        id\n        name\n        description\n        bannerURL\n        imageURL\n        releaseDate\n        avgScore\n        totalRating\n        genres\n        tags\n        platforms\n        isGameAdded\n        isGameLiked\n      }\n      planning {\n        id\n        name\n        description\n        bannerURL\n        imageURL\n        releaseDate\n        avgScore\n        totalRating\n        genres\n        tags\n        platforms\n        isGameAdded\n        isGameLiked\n      }\n      completed {\n        id\n        name\n        description\n        bannerURL\n        imageURL\n        releaseDate\n        avgScore\n        totalRating\n        genres\n        tags\n        platforms\n        isGameAdded\n        isGameLiked\n      }\n      paused {\n        id\n        name\n        description\n        bannerURL\n        imageURL\n        releaseDate\n        avgScore\n        totalRating\n        genres\n        tags\n        platforms\n        isGameAdded\n        isGameLiked\n      }\n      dropped {\n        id\n        name\n        description\n        bannerURL\n        imageURL\n        releaseDate\n        avgScore\n        totalRating\n        genres\n        tags\n        platforms\n        isGameAdded\n        isGameLiked\n      }\n      justAdded {\n        id\n        name\n        description\n        bannerURL\n        imageURL\n        releaseDate\n        avgScore\n        totalRating\n        genres\n        tags\n        platforms\n        isGameAdded\n        isGameLiked\n      }\n      playingCount\n      planningCount\n      completedCount\n      pausedCount\n      droppedCount\n      justAddedCount\n      totalCount\n      listsOrder\n      errors\n    }\n  }\n"): (typeof documents)["\n  query GamesByTagsForAUser {\n    gamesByStatusForAUser {\n      playing {\n        id\n        name\n        description\n        bannerURL\n        imageURL\n        releaseDate\n        avgScore\n        totalRating\n        genres\n        tags\n        platforms\n        isGameAdded\n        isGameLiked\n      }\n      planning {\n        id\n        name\n        description\n        bannerURL\n        imageURL\n        releaseDate\n        avgScore\n        totalRating\n        genres\n        tags\n        platforms\n        isGameAdded\n        isGameLiked\n      }\n      completed {\n        id\n        name\n        description\n        bannerURL\n        imageURL\n        releaseDate\n        avgScore\n        totalRating\n        genres\n        tags\n        platforms\n        isGameAdded\n        isGameLiked\n      }\n      paused {\n        id\n        name\n        description\n        bannerURL\n        imageURL\n        releaseDate\n        avgScore\n        totalRating\n        genres\n        tags\n        platforms\n        isGameAdded\n        isGameLiked\n      }\n      dropped {\n        id\n        name\n        description\n        bannerURL\n        imageURL\n        releaseDate\n        avgScore\n        totalRating\n        genres\n        tags\n        platforms\n        isGameAdded\n        isGameLiked\n      }\n      justAdded {\n        id\n        name\n        description\n        bannerURL\n        imageURL\n        releaseDate\n        avgScore\n        totalRating\n        genres\n        tags\n        platforms\n        isGameAdded\n        isGameLiked\n      }\n      playingCount\n      planningCount\n      completedCount\n      pausedCount\n      droppedCount\n      justAddedCount\n      totalCount\n      listsOrder\n      errors\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation EditUserGameByGameId($input: EditUserGamesInput!) {\n    editUserGames(input: $input) {\n      userGame {\n        id\n        gameNote\n        gameStatus\n        startDate\n        completedDate\n        rating\n        private\n        createdAt\n        updatedAt\n        game {\n          id\n          name\n          description\n          bannerURL\n          imageURL\n          releaseDate\n          avgScore\n          totalRating\n          genres\n          tags\n          platforms\n          isGameAdded\n          isGameLiked\n        }\n      }\n      errors\n    }\n  }\n"): (typeof documents)["\n  mutation EditUserGameByGameId($input: EditUserGamesInput!) {\n    editUserGames(input: $input) {\n      userGame {\n        id\n        gameNote\n        gameStatus\n        startDate\n        completedDate\n        rating\n        private\n        createdAt\n        updatedAt\n        game {\n          id\n          name\n          description\n          bannerURL\n          imageURL\n          releaseDate\n          avgScore\n          totalRating\n          genres\n          tags\n          platforms\n          isGameAdded\n          isGameLiked\n        }\n      }\n      errors\n    }\n  }\n"];

export function gql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;